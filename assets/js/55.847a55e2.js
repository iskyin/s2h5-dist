(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{429:function(t,e,a){"use strict";a.r(e);var n=a(40),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"···-全局-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#···-全局-api"}},[t._v("#")]),t._v(" ··· 全局 API")]),t._v(" "),a("blockquote",[a("p",[t._v("核心技术讲解之全局 API")])]),t._v(" "),a("h2",{attrs:{id:"createapp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createapp"}},[t._v("#")]),t._v(" createApp")]),t._v(" "),a("blockquote",[a("p",[t._v("返回一个提供应用上下文的应用实例。应用实例挂载的整个组件树共享同一个上下文")])]),t._v(" "),a("p",[t._v("该函数接收一个根组件选项对象作为第一个参数")]),t._v(" "),a("h2",{attrs:{id:"h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[t._v("#")]),t._v(" h")]),t._v(" "),a("blockquote",[a("p",[t._v("目的是用于手动编写的渲染函数：\n返回一个”虚拟节点“，通常缩写为 VNode：一个普通对象，其中包含向 Vue 描述它应在页面上渲染哪种节点的信息，包括所有子节点的描述。")])]),t._v(" "),a("p",[t._v("参数：")]),t._v(" "),a("ul",[a("li",[t._v("type：必须 （String | Object | Function）=> HTML 标签名、组件或异步组件。使用返回 null 的函数将渲染一个注释。此参数是必需的。")]),t._v(" "),a("li",[t._v("props 可选 Object | Object | Function）=> 一个对象，与我们将在模板中使用的 attribute、prop 和事件相对应")]),t._v(" "),a("li",[t._v("children 可选 （String | Array | Object）=> 子代 VNode，使用 h() 生成，或者使用字符串来获取“文本 VNode”，或带有插槽的对象")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Some title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"definecomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definecomponent"}},[t._v("#")]),t._v(" defineComponent")]),t._v(" "),a("blockquote",[a("p",[t._v("重点：返回了组件的定义")])]),t._v(" "),a("h2",{attrs:{id:"defineasynccomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defineasynccomponent"}},[t._v("#")]),t._v(" defineAsyncComponent")]),t._v(" "),a("blockquote",[a("p",[t._v("创建一个只有在需要时才会加载的异步组件。")])]),t._v(" "),a("p",[t._v("参数：")]),t._v(" "),a("p",[t._v("对于基本用法，defineAsyncComponent 可以接受一个返回 Promise 的工厂函数。Promise 的 resolve 回调应该在服务端返回组件定义后被调用。你也可以调用 reject(reason) 来表示加载失败。")])])}),[],!1,null,null,null);e.default=s.exports}}]);